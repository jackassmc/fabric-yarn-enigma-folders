CLASS bdu net/minecraft/util/math/Vec3d
	FIELD a ZERO Lbdu;
	FIELD b x D
	FIELD c y D
	FIELD d z D
	METHOD <init> (DDD)V
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD <init> (Ldl;)V
		ARG 0 vec
	METHOD a normalize ()Lbdu;
	METHOD a multiply (D)Lbdu;
		ARG 0 scale
	METHOD a subtract (DDD)Lbdu;
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD a rotateX (F)Lbdu;
		ARG 0 radians
	METHOD a fromPolar (FF)Lbdu;
		ARG 0 pitch
		ARG 1 yaw
	METHOD a fromPolar (Lbdt;)Lbdu;
		ARG 0 polar
	METHOD a reverseSubtract (Lbdu;)Lbdu;
		ARG 0 vec
	METHOD a castByX (Lbdu;D)Lbdu;
		ARG 0 target
		ARG 1 newX
	METHOD b length ()D
	METHOD b add (DDD)Lbdu;
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD b rotateY (F)Lbdu;
		ARG 0 radians
	METHOD b dotProduct (Lbdu;)D
		ARG 0 vec
	METHOD b castByY (Lbdu;D)Lbdu;
		ARG 0 target
		ARG 1 newY
	METHOD c lengthSquared ()D
	METHOD c squaredDistanceTo (DDD)D
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD c crossProduct (Lbdu;)Lbdu;
		ARG 0 vec
	METHOD c castByZ (Lbdu;D)Lbdu;
		ARG 0 target
		ARG 1 newZ
	METHOD d subtract (Lbdu;)Lbdu;
		ARG 0 vec
	METHOD e add (Lbdu;)Lbdu;
		ARG 0 vec
	METHOD equals (Ljava/lang/Object;)Z
		ARG 0 other
	METHOD f distanceTo (Lbdu;)D
		ARG 0 vec
	METHOD g squaredDistanceTo (Lbdu;)D
		ARG 0 vec
