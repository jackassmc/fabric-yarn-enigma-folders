CLASS ckd net/minecraft/world/loot/function/ConditionalLootFunction
	CLASS ckd$a Builder
		FIELD a conditionList Ljava/util/List;
		METHOD a withCondition (Lclh$a;)Lckd$a;
		METHOD b withCondition (Lclh$a;)Ljava/lang/Object;
		METHOD c getThis ()Ljava/lang/Object;
		METHOD d build ()Lckd$a;
		METHOD g getConditions ()[Lclh;
	CLASS ckd$b Joiner
		FIELD a joiner Ljava/util/function/Function;
		METHOD a create ()Lckd$b;
		METHOD b build ()Lcke;
		METHOD d build ()Lckd$a;
	CLASS ckd$c Factory
		METHOD a toJson (Lcom/google/gson/JsonObject;Lckd;Lcom/google/gson/JsonSerializationContext;)V
		METHOD a toJson (Lcom/google/gson/JsonObject;Lcke;Lcom/google/gson/JsonSerializationContext;)V
		METHOD a fromJson (Lcom/google/gson/JsonObject;Lcom/google/gson/JsonDeserializationContext;)Lckd;
		METHOD b fromJson (Lcom/google/gson/JsonObject;Lcom/google/gson/JsonDeserializationContext;)Lcke;
		METHOD b fromJson (Lcom/google/gson/JsonObject;Lcom/google/gson/JsonDeserializationContext;[Lclh;)Lckd;
	FIELD a predicate Ljava/util/function/Predicate;
	FIELD b conditions [Lclh;
	METHOD a process (Lawo;Lciv;)Lawo;
		ARG 1 stack
	METHOD a check (Lciz;Ljava/util/function/Function;Ljava/util/Set;Lcku;)V
	METHOD a create (Ljava/util/function/Function;)Lckd$a;
	METHOD b apply (Lawo;Lciv;)Lawo;
