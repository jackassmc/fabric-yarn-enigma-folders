CLASS dx net/minecraft/util/math/BlockPos
	CLASS dx$a Mutable
		FIELD b x I
		FIELD c y I
		FIELD d z I
		METHOD a add (DDD)Ldx;
		METHOD a add (III)Ldx;
		METHOD a offset (Lee;I)Ldx;
		METHOD a set (Lub;)Ldx$a;
		METHOD c set (DDD)Ldx$a;
		METHOD c set (III)Ldx$a;
		METHOD c setOffset (Lee;)Ldx$a;
		METHOD c setOffset (Lee;I)Ldx$a;
		METHOD d crossProduct (Leu;)Leu;
		METHOD g set (Leu;)Ldx$a;
		METHOD h toImmutable ()Ldx;
		METHOD p getX ()I
		METHOD p setY (I)V
		METHOD q getY ()I
		METHOD r getZ ()I
	CLASS dx$b PooledMutable
		FIELD f usable Z
		FIELD g POOL Ljava/util/List;
		METHOD a set (Lub;)Ldx$a;
		METHOD c set (DDD)Ldx$a;
		METHOD c set (III)Ldx$a;
		METHOD c setOffset (Lee;)Ldx$a;
		METHOD c setOffset (Lee;I)Ldx$a;
		METHOD c set (Lub;)Ldx$b;
		METHOD d get (DDD)Ldx$b;
		METHOD d setOffset (Lee;)Ldx$b;
		METHOD d setOffset (Lee;I)Ldx$b;
		METHOD e set (DDD)Ldx$b;
		METHOD e get (III)Ldx$b;
		METHOD f set (III)Ldx$b;
		METHOD g set (Leu;)Ldx$a;
		METHOD i get (Leu;)Ldx$b;
		METHOD j set (Leu;)Ldx$b;
		METHOD s get ()Ldx$b;
		METHOD t free ()V
	FIELD a ORIGIN Ldx;
	FIELD b LOGGER Lorg/apache/logging/log4j/Logger;
	FIELD c BITS_X I
	FIELD d BITS_Z I
	FIELD f BITS_Y I
	FIELD g SHIFT_Y I
	FIELD h SHIFT_X I
	FIELD i MASK_X J
	FIELD j MASK_Y J
	FIELD k MASK_Z J
	METHOD <init> (DDD)V
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD <init> (III)V
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD <init> (Lbfp;)V
		ARG 0 vec
	METHOD <init> (Leu;)V
		ARG 0 vec
	METHOD <init> (Lub;)V
		ARG 0 entity
	METHOD a up ()Ldx;
	METHOD a add (DDD)Ldx;
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD a add (III)Ldx;
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD a fromLong (J)Ldx;
		ARG 0 l
	METHOD a iterateBoxPositions (Ldx;Ldx;)Ljava/lang/Iterable;
		ARG 0 pos1
		ARG 1 pos2
	METHOD a offset (Lee;)Ldx;
		ARG 0 facing
	METHOD a offset (Lee;I)Ldx;
		ARG 0 facing
		ARG 1 distance
	METHOD a add (Leu;)Ldx;
		ARG 0 vec
	METHOD b down ()Ldx;
	METHOD b up (I)Ldx;
		ARG 0 distance
	METHOD b iterateBoxPositionsMutable (Ldx;Ldx;)Ljava/lang/Iterable;
		ARG 0 pos1
		ARG 1 pos2
	METHOD b subtract (Leu;)Ldx;
		ARG 0 vec
	METHOD c north ()Ldx;
	METHOD c down (I)Ldx;
		ARG 0 distance
	METHOD c crossProduct (Leu;)Ldx;
		ARG 0 vec
	METHOD d south ()Ldx;
	METHOD d north (I)Ldx;
		ARG 0 distance
	METHOD d crossProduct (Leu;)Leu;
		ARG 0 vec
	METHOD e west ()Ldx;
	METHOD e south (I)Ldx;
		ARG 0 distance
	METHOD f east ()Ldx;
	METHOD f west (I)Ldx;
		ARG 0 distance
	METHOD g toLong ()J
	METHOD g east (I)Ldx;
		ARG 0 distance
	METHOD h toImmutable ()Ldx;
