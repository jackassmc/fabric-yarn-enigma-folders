CLASS cjz net/minecraft/util/LevelPropagator
	CLASS cjz$1
		METHOD rehash (I)V
			ARG 1 newN
	CLASS cjz$2
		METHOD rehash (I)V
			ARG 1 newN
	FIELD a levelCount I
	FIELD b levelToIds [Lit/unimi/dsi/fastutil/longs/LongLinkedOpenHashSet;
	FIELD c idToLevel Lit/unimi/dsi/fastutil/longs/Long2ByteFunction;
	FIELD d minLevel I
	FIELD e hasUpdates Z
	METHOD <init> (III)V
		ARG 1 levelCount
		ARG 2 initLevelCapacity
		ARG 3 initTotalCapacity
	METHOD a updateMinLevel (I)V
		ARG 1 limitLevel
	METHOD a min (II)I
		ARG 1 a
		ARG 2 b
	METHOD a isInvalid (J)Z
		ARG 1 id
	METHOD a setLevel (JI)V
		ARG 1 id
		ARG 3 level
	METHOD a add (JII)V
		ARG 1 id
		ARG 3 level
		ARG 4 targetLevel
	METHOD a removeFromLevel (JIIZ)V
		ARG 1 id
		ARG 3 level
		ARG 4 maxLevel
		ARG 5 removeFromLevelMap
	METHOD a updateNeighborsRecursively (JIZ)V
		ARG 1 id
		ARG 3 targetLevel
		ARG 4 mergeAsMin
	METHOD a getMergedLevel (JJI)I
		ARG 1 id
		ARG 3 sourceId
		ARG 5 limitLevel
	METHOD a update (JJIIIZ)V
		ARG 1 causingId
		ARG 3 id
		ARG 5 level
		ARG 6 currentLevel
		ARG 7 previousLevel
		ARG 8 mergeAsMin
	METHOD a update (JJIZ)V
		ARG 1 causingId
		ARG 3 id
		ARG 5 level
		ARG 6 mergeAsMin
	METHOD b hasLevelUpdates ()Z
	METHOD b updateAllRecursively (I)I
		ARG 1 maxSteps
	METHOD b getPropagatedLevel (JJI)I
		ARG 1 fromId
		ARG 3 toId
		ARG 5 currentLevel
	METHOD b updateRecursively (JJIZ)V
		ARG 1 sourceId
		ARG 3 id
		ARG 5 level
		ARG 6 mergeAsMin
	METHOD c getLevel (J)I
		ARG 1 id
	METHOD e remove (J)V
		ARG 1 id
	METHOD f fullyUpdate (J)V
		ARG 1 id
