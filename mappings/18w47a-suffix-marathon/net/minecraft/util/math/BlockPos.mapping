CLASS es net/minecraft/util/math/BlockPos
	CLASS es$1
		FIELD a minX I
		FIELD b minY I
		FIELD c minZ I
		FIELD d maxX I
		FIELD e maxY I
		FIELD f maxZ I
		FIELD h x I
		FIELD i y I
		FIELD j z I
	CLASS es$2
		FIELD a minX I
		FIELD b minY I
		FIELD c minZ I
		FIELD d maxX I
		FIELD e maxY I
		FIELD f maxZ I
		FIELD g pos Les$a;
	CLASS es$a Mutable
		FIELD b xMut I
		FIELD c yMut I
		FIELD d zMut I
		METHOD <init> (III)V
			ARG 0 x
			ARG 1 y
			ARG 2 z
		METHOD a add (DDD)Les;
			ARG 0 x
			ARG 1 y
			ARG 2 z
		METHOD a set (Lage;)Les$a;
		METHOD a offset (Lex;I)Les;
			ARG 0 facing
			ARG 1 distance
		METHOD b add (III)Les;
			ARG 0 x
			ARG 1 y
			ARG 2 z
		METHOD c set (DDD)Les$a;
		METHOD c setOffset (Lex;)Les$a;
		METHOD c setOffset (Lex;I)Les$a;
		METHOD d set (III)Les$a;
		METHOD d crossProduct (Lfm;)Lfm;
			ARG 0 vec
		METHOD g set (Lfm;)Les$a;
		METHOD h toImmutable ()Les;
		METHOD o getX ()I
		METHOD p getY ()I
		METHOD p setY (I)V
		METHOD q getZ ()I
	CLASS es$b PooledMutable
		FIELD g POOL Ljava/util/List;
		METHOD <init> (III)V
			ARG 0 x
			ARG 1 y
			ARG 2 z
		METHOD a set (Lage;)Les$a;
		METHOD c set (DDD)Les$a;
		METHOD c set (Lage;)Les$b;
		METHOD c setOffset (Lex;)Les$a;
		METHOD c setOffset (Lex;I)Les$a;
		METHOD d get (DDD)Les$b;
		METHOD d set (III)Les$a;
		METHOD d setOffset (Lex;)Les$b;
		METHOD d setOffset (Lex;I)Les$b;
		METHOD e set (DDD)Les$b;
		METHOD f get (III)Les$b;
		METHOD g set (Lfm;)Les$a;
		METHOD j set (Lfm;)Les$b;
		METHOD r get ()Les$b;
	FIELD a ORIGIN Les;
	FIELD b LOGGER Lorg/apache/logging/log4j/Logger;
	FIELD c SIZE_BITS_X I
	FIELD d SIZE_BITS_Z I
	FIELD f SIZE_BITS_Y I
	FIELD g BITS_X J
	FIELD h BITS_Y J
	FIELD i BITS_Z J
	FIELD j BIT_SHIFT_Z I
	FIELD k BIT_SHIFT_X I
	FIELD l BIT_MASK_CHUNK_SECTION J
	METHOD <init> (DDD)V
		ARG 1 x
	METHOD <init> (III)V
		ARG 1 x
		ARG 2 y
	METHOD a asLong ()J
	METHOD a add (DDD)Les;
	METHOD a asLong (III)J
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD a add (JIII)J
		ARG 0 value
		ARG 2 x
		ARG 3 y
	METHOD a offset (JLex;)J
		ARG 0 value
	METHOD a iterateBoxPositions (Les;Les;)Ljava/lang/Iterable;
		ARG 0 pos1
		ARG 1 pos2
	METHOD a offset (Lex;)Les;
	METHOD a offset (Lex;I)Les;
	METHOD a add (Lfm;)Les;
	METHOD b up ()Les;
	METHOD b up (I)Les;
	METHOD b add (III)Les;
		ARG 1 x
		ARG 2 y
	METHOD b isHeightInvalid (J)Z
	METHOD b iterateBoxPositionsMutable (Les;Les;)Ljava/lang/Iterable;
		ARG 0 pos1
		ARG 1 pos2
	METHOD b subtract (Lfm;)Les;
	METHOD c down ()Les;
	METHOD c down (I)Les;
	METHOD c unpackLongX (J)I
	METHOD c crossProduct (Lfm;)Les;
	METHOD d north ()Les;
	METHOD d north (I)Les;
	METHOD d unpackLongY (J)I
	METHOD d crossProduct (Lfm;)Lfm;
	METHOD e south ()Les;
	METHOD e south (I)Les;
	METHOD e unpackLongZ (J)I
	METHOD f west ()Les;
	METHOD f west (I)Les;
	METHOD f fromLong (J)Les;
		ARG 0 value
	METHOD g east ()Les;
	METHOD g east (I)Les;
	METHOD h toImmutable ()Les;
